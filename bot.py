from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import json
import os
from categories import CATEGORIES
from apscheduler.schedulers.background import BackgroundScheduler
from bs4 import BeautifulSoup
import requests

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DATA_DIR = "user_data"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(USER_DATA_DIR):
    os.makedirs(USER_DATA_DIR)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start"""
    user_id = update.effective_user.id
    user_data_file = os.path.join(USER_DATA_DIR, f"{user_id}.json")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if os.path.exists(user_data_file):
        with open(user_data_file, "r", encoding="utf-8") as f:
            user_data = json.load(f)
    else:
        user_data = {}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    context.user_data['state'] = 'awaiting_category'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ Wildberries.\n"
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_category_keyboard()
    )

def get_category_keyboard():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    keyboard = []
    for category in CATEGORIES.values():
        button = InlineKeyboardButton(category['name'], callback_data=f"cat_{category['id']}")
        keyboard.append([button])
    return InlineKeyboardMarkup(keyboard)

async def category_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()

    category_id = int(query.data.split("_")[1])
    category = CATEGORIES.get(category_id)

    if not category:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    user_id = update.effective_user.id
    user_data_file = os.path.join(USER_DATA_DIR, f"{user_id}.json")

    user_data = {}
    if os.path.exists(user_data_file):
        with open(user_data_file, "r", encoding="utf-8") as f:
            user_data = json.load(f)

    user_data['category_id'] = category_id
    user_data['category_name'] = category['name']

    with open(user_data_file, "w", encoding="utf-8") as f:
        json.dump(user_data, f, ensure_ascii=False, indent=2)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É
    context.user_data['state'] = 'awaiting_price'
    await query.edit_message_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: *{category['name']}*\n"
        "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):",
        parse_mode="Markdown"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–≤–æ–¥ —Ü–µ–Ω—ã)"""
    user_id = update.effective_user.id
    user_data_file = os.path.join(USER_DATA_DIR, f"{user_id}.json")

    state = context.user_data.get('state')

    if state == 'awaiting_price':
        try:
            max_price = float(update.message.text)
            if max_price <= 0:
                raise ValueError
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        user_data = {}
        if os.path.exists(user_data_file):
            with open(user_data_file, "r", encoding="utf-8") as f:
                user_data = json.load(f)

        user_data['max_price'] = max_price

        with open(user_data_file, "w", encoding="utf-8") as f:
            json.dump(user_data, f, ensure_ascii=False, indent=2)

        await update.message.reply_text(
            f"üéØ –û—Ç–ª–∏—á–Ω–æ! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–¥—ë—Ç –Ω–∏–∂–µ *{max_price} ‚ÇΩ*.\n"
            "–Ø –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç.",
            parse_mode="Markdown"
        )
        context.user_data['state'] = None

# === –ü–†–û–í–ï–†–ö–ê –¶–ï–ù ===

def check_prices():
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    from telegram import Bot

    bot = Bot(token=token)

    for filename in os.listdir(USER_DATA_DIR):
        if not filename.endswith(".json"):
            continue
        user_id = int(filename.split(".")[0])
        user_data_file = os.path.join(USER_DATA_DIR, filename)

        try:
            with open(user_data_file, "r", encoding="utf-8") as f:
                user_data = json.load(f)

            category_id = user_data.get('category_id')
            max_price = user_data.get('max_price')
            category = CATEGORIES.get(category_id)

            if not category or not max_price:
                continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞
            base_url = "https://www.wildberries.ru"
            url = f"{base_url}{category['url']}?{category['query']}"

            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
            }

            response = requests.get(url, headers=headers, timeout=15)
            if response.status_code != 200:
                continue

            soup = BeautifulSoup(response.text, "html.parser")
            products = soup.find_all("div", class_="product-card")

            notified = False
            for product in products[:10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤
                price_tag = product.find("ins", class_="price")
                name_tag = product.find("span", class_="goods-name")

                if not price_tag or not name_tag:
                    continue

                try:
                    price_text = price_tag.get_text(strip=True).replace(" ", "").replace("‚ÇΩ", "")
                    price = float(price_text)
                    name = name_tag.get_text(strip=True)
                except:
                    continue

                if price <= max_price:
                    link = product.find("a", href=True)
                    product_url = base_url + link["href"] if link else base_url

                    await bot.send_message(
                        chat_id=user_id,
                        text=f"üî• *–¶–µ–Ω–∞ —É–ø–∞–ª–∞!* \n"
                             f"üì¶ {name}\n"
                             f"üí∞ {price} ‚ÇΩ\n"
                             f"üîó [–°–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä]({product_url})",
                        parse_mode="Markdown",
                        disable_web_page_preview=False
                    )
                    notified = True
                    break  # –û–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É ‚Äî —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å

            if not notified:
                print(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–ª—è {user_id}: {e}")

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(category_callback, pattern="^cat_\\d+"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = BackgroundScheduler()
    scheduler.add_job(check_prices, "interval", minutes=10)
    scheduler.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥...")
    application.run_polling()

if __name__ == "__main__":
    main()
