import os
import logging
from telegram import Update
from telegram.ext import (
    Updater, 
    CommandHandler, 
    MessageHandler, 
    Filters, 
    CallbackContext
)
import sqlite3
import requests
from bs4 import BeautifulSoup
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = 'user_data/users.db'

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            category_id INTEGER,
            price_threshold REAL,
            last_checked TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user(user_id, category_id, price_threshold):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, category_id, price_threshold)
        VALUES (?, ?, ?)
    ''', (user_id, category_id, price_threshold))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_user(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

# –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
def update_last_checked(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET last_checked = CURRENT_TIMESTAMP WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

# –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ Wildberries
def parse_category(category_url):
    url = f"https://www.wildberries.ru/{category_url}"
    response = requests.get(url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        products = []
        for product in soup.find_all('div', class_='product-card'):
            try:
                title = product.find('span', class_='goods-name').text.strip()
                price = float(product.find('ins', class_='price').text.replace(' ', '').replace('‚ÇΩ', ''))
                link = product.find('a')['href']
                products.append({
                    'title': title,
                    'price': price,
                    'link': f"https://www.wildberries.ru{link}"
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        return products
    else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {url}")
        return []

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤
def check_prices(context: CallbackContext):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users')
    users = cursor.fetchall()
    conn.close()

    for user in users:
        user_id, category_id, price_threshold = user
        category = CATEGORIES.get(category_id)
        if category:
            products = parse_category(category['url'])
            for product in products:
                if product['price'] <= price_threshold:
                    message = (
                        f"–ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n"
                        f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {product['title']}\n"
                        f"üí∞ –¶–µ–Ω–∞: {product['price']} ‚ÇΩ\n"
                        f"üîó –°—Å—ã–ª–∫–∞: {product['link']}"
                    )
                    context.bot.send_message(chat_id=user_id, text=message)
            update_last_checked(user_id)

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ Wildberries.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_category, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_price, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã."
    )

# –ö–æ–º–∞–Ω–¥–∞ /set_category
def set_category(update: Update, context: CallbackContext) -> None:
    categories_list = "\n".join([f"{cat['id']}. {cat['name']}" for cat in CATEGORIES.values()])
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:\n"
        f"{categories_list}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['state'] = 'set_category'

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def process_set_category(update: Update, context: CallbackContext) -> None:
    user_input = update.message.text
    try:
        category_id = int(user_input)
        if category_id in CATEGORIES:
            context.user_data['category_id'] = category_id
            update.message.reply_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {CATEGORIES[category_id]['name']}\n"
                "–¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_price."
            )
        else:
            update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

# –ö–æ–º–∞–Ω–¥–∞ /set_price
def set_price(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10000):"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['state'] = 'set_price'

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞ —Ü–µ–Ω—ã
def process_set_price(update: Update, context: CallbackContext) -> None:
    user_input = update.message.text
    try:
        price_threshold = float(user_input)
        if 'category_id' in context.user_data:
            category_id = context.user_data['category_id']
            add_user(update.effective_user.id, category_id, price_threshold)
            update.message.reply_text(
                f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {CATEGORIES[category_id]['name']}\n"
                f"–ü–æ—Ä–æ–≥ —Ü–µ–Ω—ã: {price_threshold} ‚ÇΩ"
            )
        else:
            update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_category.")
    except ValueError:
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã.")

# –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –Ω–∞ —Ñ–æ–Ω–µ
def start_scheduler(context: CallbackContext):
    scheduler = BackgroundScheduler()
    scheduler.add_job(check_prices, 'interval', minutes=60, args=[context])
    scheduler.start()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv('TOKEN')
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")
        return

    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("set_category", set_category))
    dispatcher.add_handler(CommandHandler("set_price", set_price))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, process_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    start_scheduler(dispatcher)

    # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–¥–ª—è Render)
    PORT = int(os.environ.get('PORT', 10000))
    updater.start_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=f"https://your-render-app-name.onrender.com/{TOKEN}"
    )
    updater.idle()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def process_message(update: Update, context: CallbackContext) -> None:
    if 'state' in context.user_data:
        state = context.user_data['state']
        if state == 'set_category':
            process_set_category(update, context)
        elif state == 'set_price':
            process_set_price(update, context)
        del context.user_data['state']

if __name__ == '__main__':
    main()
