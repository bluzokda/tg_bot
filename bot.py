from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
import json
import os
from categories import CATEGORIES
from apscheduler.schedulers.background import BackgroundScheduler
from bs4 import BeautifulSoup
import requests

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DATA_DIR = "user_data"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(USER_DATA_DIR):
    os.makedirs(USER_DATA_DIR)

def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_data_file = os.path.join(USER_DATA_DIR, f"{user_id}.json")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if os.path.exists(user_data_file):
        with open(user_data_file, "r") as f:
            user_data = json.load(f)
    else:
        user_data = {}
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ Wildberries.\n"
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:",
        reply_markup=get_category_keyboard()
    )

def get_category_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    keyboard = []
    for category in CATEGORIES.values():
        button = InlineKeyboardButton(category['name'], callback_data=f"category_{category['id']}")
        keyboard.append([button])
    return InlineKeyboardMarkup(keyboard)

def category_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    category_id = int(query.data.split("_")[1])
    category = CATEGORIES[category_id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    user_id = update.effective_user.id
    user_data_file = os.path.join(USER_DATA_DIR, f"{user_id}.json")
    
    user_data = {}
    if os.path.exists(user_data_file):
        with open(user_data_file, "r") as f:
            user_data = json.load(f)
    
    user_data['category_id'] = category_id
    user_data['category_name'] = category['name']
    
    with open(user_data_file, "w") as f:
        json.dump(user_data, f)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category['name']}\n"
        "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å:"
    )
    return "waiting_for_price"

def waiting_for_price(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
    user_id = update.effective_user.id
    max_price = update.message.text
    
    try:
        max_price = float(max_price)
    except ValueError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")
        return "waiting_for_price"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    user_data_file = os.path.join(USER_DATA_DIR, f"{user_id}.json")
    with open(user_data_file, "r") as f:
        user_data = json.load(f)
    
    user_data['max_price'] = max_price
    
    with open(user_data_file, "w") as f:
        json.dump(user_data, f)
    
    update.message.reply_text(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user_data['category_name']}\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {max_price}\n"
        "–Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ü–µ–Ω!"
    )

def check_prices():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"""
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    bot = Bot(token=bot_token)
    
    for user_data_file in os.listdir(USER_DATA_DIR):
        user_id = int(user_data_file.split(".")[0])
        with open(os.path.join(USER_DATA_DIR, user_data_file), "r") as f:
            user_data = json.load(f)
        
        category_id = user_data.get('category_id')
        max_price = user_data.get('max_price')
        category = CATEGORIES.get(category_id)
        
        if category and max_price:
            url = f"https://www.wildberries.ru{category['url']}?{category['query']}"
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            response = requests.get(url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'html.parser')
                products = soup.find_all('div', class_='product-card')
                
                for product in products:
                    price_element = product.find('ins', class_='price')
                    name_element = product.find('span', class_='goods-name')
                    
                    if price_element and name_element:
                        price = float(price_element.text.replace(' ', '').replace('‚ÇΩ', ''))
                        name = name_element.text.strip()
                        
                        if price <= max_price:
                            send_notification(bot, user_id, name, price)

def send_notification(bot: Bot, user_id: int, product_name: str, price: float):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    message = (
        f"üö® –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}\n"
        f"–¶–µ–Ω–∞: {price} ‚ÇΩ\n"
        f"–°—Å—ã–ª–∫–∞: https://www.wildberries.ru/catalog/{CATEGORIES[user_id]['url']}"
    )
    bot.send_message(chat_id=user_id, text=message)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    
    # –°–æ–∑–¥–∞–µ–º updater –∏ dispatcher
    updater = Updater(token, use_context=True)
    dp = updater.dispatcher
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(category_callback))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, waiting_for_price))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    scheduler = BackgroundScheduler()
    scheduler.add_job(check_prices, 'interval', minutes=10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    scheduler.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
