import os
import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import sqlite3
import requests
from bs4 import BeautifulSoup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ categories.py
try:
    from categories import CATEGORIES
except ImportError:
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å CATEGORIES –∏–∑ categories.py")
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
    CATEGORIES = {
        3192: {"id": 3192, "name": "–ù–æ—É—Ç–±—É–∫–∏ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã", "url": "elektronika/noutbuki-pereferiya"},
        3281: {"id": 3281, "name": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –∏ –≥–∞–¥–∂–µ—Ç—ã", "url": "elektronika/smartfony-i-gadzhety"},
        617: {"id": 617, "name": "–¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã", "url": "elektronika/televizory"},
        813: {"id": 813, "name": "–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ", "url": "krasota-i-zdorove"},
        1680: {"id": 1680, "name": "–î–æ–º –∏ —Å–∞–¥", "url": "dom-i-dacha"},
        907: {"id": 907, "name": "–û–¥–µ–∂–¥–∞", "url": "zhenshchinam/odezhda"},
        908: {"id": 908, "name": "–û–±—É–≤—å", "url": "zhenshchinam/obuv"},
    }

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = 'user_data/users.db'

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def init_db():
    os.makedirs('user_data', exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            category_id INTEGER,
            price_threshold REAL,
            last_checked TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user(user_id, category_id, price_threshold):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, category_id, price_threshold)
        VALUES (?, ?, ?)
    ''', (user_id, category_id, price_threshold))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_user(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, category_id, price_threshold FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

# –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
def update_last_checked(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET last_checked = CURRENT_TIMESTAMP WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

# –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ Wildberries
def parse_category(category_url):
    url = f"https://www.wildberries.ru/{category_url}"
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'html.parser')
        products = []
        
        # Wildberries –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –∫–ª–∞—Å—Å—ã, –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ
        product_cards = soup.find_all('div', class_='product-card')
        
        for card in product_cards:
            try:
                # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                name_tag = card.find('span', class_='goods-name')
                if not name_tag:
                    name_tag = card.find('span', class_='product-name')
                title = name_tag.get_text(strip=True) if name_tag else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                
                # –¶–µ–Ω–∞ (–∏—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö)
                price_tag = None
                # –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞ (–Ω–æ–≤–∞—è)
                price_tag = card.find('ins', class_='price')
                if not price_tag:
                    # –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ (–µ—Å–ª–∏ –Ω–µ—Ç —Å–∫–∏–¥–∫–∏)
                    price_tag = card.find('span', class_='price')
                if not price_tag:
                    # –¶–µ–Ω–∞ –≤ –¥—Ä—É–≥–æ–º –±–ª–æ–∫–µ
                    price_tag = card.find('span', class_='price-value')
                
                if price_tag:
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –∑–∞–ø—è—Ç–æ–π/—Ç–æ—á–∫–∏
                    price_text = price_tag.get_text(strip=True)
                    price_clean = ''.join(c for c in price_text if c.isdigit() or c in ',.')
                    price_clean = price_clean.replace(',', '.')
                    price = float(price_clean) if price_clean else 0
                else:
                    price = 0
                
                # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
                link_tag = card.find('a')
                if link_tag and 'href' in link_tag.attrs:
                    link = link_tag['href']
                    if link.startswith('/'):
                        link = f"https://www.wildberries.ru{link}"
                    else:
                        link = f"https://www.wildberries.ru/{link}"
                else:
                    link = "#"
                
                if price > 0:
                    products.append({
                        'title': title,
                        'price': price,
                        'link': link
                    })
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
                continue
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_url}")
        return products
        
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {url}: {e}")
        return []

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async def check_prices(context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, category_id, price_threshold FROM users')
    users = cursor.fetchall()
    conn.close()

    for user in users:
        user_id, category_id, price_threshold = user
        category = CATEGORIES.get(category_id)
        
        if category:
            products = parse_category(category['url'])
            found = 0
            
            for product in products:
                if product['price'] <= price_threshold:
                    message = (
                        f"üî• <b>–ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É!</b>\n\n"
                        f"üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product['title']}\n"
                        f"üí∞ <b>–¶–µ–Ω–∞:</b> {product['price']:,.0f} ‚ÇΩ\n"
                        f"üîó <b>–°—Å—ã–ª–∫–∞:</b> <a href='{product['link']}'>–ü–µ—Ä–µ–π—Ç–∏</a>"
                    )
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=message,
                            parse_mode='HTML',
                            disable_web_page_preview=False
                        )
                        found += 1
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            if found > 0:
                update_last_checked(user_id)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {found} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ Wildberries.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üîπ /set_category ‚Äî –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤\n"
        "üîπ /set_price ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã\n\n"
        "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ —Ü–µ–Ω–µ –Ω–∏–∂–µ –≤–∞—à–µ–π!"
    )

# –ö–æ–º–∞–Ω–¥–∞ /set_category
async def set_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    categories_list = "\n".join([f"<b>{cat['id']}</b>. {cat['name']}" for cat in CATEGORIES.values()])
    await update.message.reply_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
        f"{categories_list}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä</b> –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        parse_mode='HTML'
    )
    context.user_data['state'] = 'set_category'

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def process_set_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_input = update.message.text.strip()
    try:
        category_id = int(user_input)
        if category_id in CATEGORIES:
            context.user_data['category_id'] = category_id
            await update.message.reply_text(
                f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: <b>{CATEGORIES[category_id]['name']}</b>\n\n"
                "–¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_price.",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")

# –ö–æ–º–∞–Ω–¥–∞ /set_price
async def set_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>15000</b>):",
        parse_mode='HTML'
    )
    context.user_data['state'] = 'set_price'

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞ —Ü–µ–Ω—ã
async def process_set_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_input = update.message.text.strip()
    try:
        price_threshold = float(user_input)
        if price_threshold <= 0:
            await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
            
        if 'category_id' in context.user_data:
            category_id = context.user_data['category_id']
            user_id = update.effective_user.id
            
            add_user(user_id, category_id, price_threshold)
            
            await update.message.reply_text(
                f"‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n"
                f"üîç –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORIES[category_id]['name']}\n"
                f"üí∞ –ü–æ—Ä–æ–≥ —Ü–µ–Ω—ã: {price_threshold:,.0f} ‚ÇΩ\n\n"
                "–Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ —Ç–æ–≤–∞—Ä–∞—Ö –ø–æ —ç—Ç–æ–π —Ü–µ–Ω–µ –∏–ª–∏ –Ω–∏–∂–µ.",
                parse_mode='HTML'
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if 'state' in context.user_data:
                del context.user_data['state']
            if 'category_id' in context.user_data:
                del context.user_data['category_id']
                
        else:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_category."
            )
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10000.50).")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def process_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if 'state' in context.user_data:
        state = context.user_data['state']
        if state == 'set_category':
            await process_set_category(update, context)
        elif state == 'set_price':
            await process_set_price(update, context)
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–∞–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv('TOKEN')
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è v20+)
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set_category", set_category))
    application.add_handler(CommandHandler("set_price", set_price))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_message))

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        check_prices,
        'interval',
        minutes=60,
        args=[application],
        id='price_check_job'
    )
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç)")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    application.run_polling(allowed_updates=Update.ALL_TYPES)

    # –î–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞ (Render, Heroku) –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±—Ö—É–∫:
    # PORT = int(os.environ.get('PORT', 8443))
    # application.run_webhook(
    #     listen="0.0.0.0",
    #     port=PORT,
    #     webhook_url=f"https://your-render-app-name.onrender.com/{TOKEN}"
    # )

if __name__ == '__main__':
    main()
