import os
import logging
import requests
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_STATE = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞ Wildberries –ø–æ —Ü–µ–Ω–∞–º –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π.\n\n"
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /setprice –∏ —É–∫–∞–∂–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /setprice 5000)\n"
        "2. –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞"
    )

async def set_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã"""
    try:
        user_id = update.message.from_user.id
        price = float(context.args[0])
        
        if price <= 0:
            await update.message.reply_text("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
            
        USER_STATE[user_id] = {"target_price": price}
        await update.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {price} —Ä—É–±.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setprice <—Ü–µ–Ω–∞> (–Ω–∞–ø—Ä–∏–º–µ—Ä: /setprice 2500)")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º"""
    user_id = update.message.from_user.id
    query = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ —Ü–µ–Ω–∞
    if user_id not in USER_STATE or "target_price" not in USER_STATE[user_id]:
        await update.message.reply_text("‚ö† –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É —Å –ø–æ–º–æ—â—å—é /setprice")
        return
        
    target_price = USER_STATE[user_id]["target_price"]
    
    await update.message.reply_text(f"üîç –ò—â—É —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}' –¥–æ {target_price} —Ä—É–±...")
    
    try:
        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries
        products = search_wildberries(query)
        if not products:
            await update.message.reply_text("üò¢ –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        filtered_products = [
            p for p in products 
            if p["price"] <= target_price
        ]
        filtered_products.sort(key=lambda x: x["price"])
        
        if not filtered_products:
            await update.message.reply_text("üò¢ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã")
            return
            
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        message = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_products)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n\n"
        for i, product in enumerate(filtered_products[:5], 1):
            message += (
                f"{i}. {product['name']}\n"
                f"üíµ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
                f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {product['rating']} | ‚ú® –û—Ç–∑—ã–≤–æ–≤: {product['feedbacks']}\n"
                f"üõí [–ö—É–ø–∏—Ç—å]({product['link']})\n\n"
            )
        
        await update.message.reply_text(
            message, 
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤: {e}", exc_info=True)
        await update.message.reply_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

def search_wildberries(query: str) -> list:
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ (–æ–±—Ö–æ–¥ –∞–Ω—Ç–∏–±–æ—Ç–∞)"""
    # –ë–∞–∑–æ–≤—ã–π URL ‚Äî –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ä–µ–≥–∏–æ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä, 0 –∏–ª–∏ 1
    url = "https://catalog.wb.ru/search/catalog"
    
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
        "Accept": "application/json",
        "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
        "Referer": "https://www.wildberries.ru/",
        "Origin": "https://www.wildberries.ru",
        "Connection": "keep-alive"
    }
    
    params = {
        "TestGroup": "noauto",
        "TestID": "noauto",
        "appType": 1,
        "curr": "rub",
        "dest": -1257786,  # –†–æ—Å—Å–∏—è
        "lang": "ru",
        "locale": "ru",
        "page": 1,
        "query": query,
        "resultset": "catalog",
        "sort": "popular",
        "spp": 30,
        "suppressSpellcheck": False
    }

    try:
        response = requests.get(url, headers=headers, params=params, timeout=15)
        
        # –î–∞–∂–µ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 403, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç
        if response.status_code != 200:
            logger.error(f"Wildberries –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}, —Ç–µ–∫—Å—Ç: {response.text[:200]}")
            return []

        data = response.json()
        
        products = []
        for item in data.get("data", {}).get("products", [])[:20]:
            price_u = item.get("priceU")  # —Ü–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            sale_price_u = item.get("salePriceU") or price_u
            if not sale_price_u:
                continue

            products.append({
                "name": item.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                "price": sale_price_u // 100,  # –≤ —Ä—É–±–ª—è—Ö
                "rating": round(item.get("reviewRating", 0), 1),
                "feedbacks": item.get("feedbacks", 0),
                "link": f"https://www.wildberries.ru/catalog/{item['id']}/detail.aspx"
            })
        
        return products

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Wildberries: {e}", exc_info=True)
        return []

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("setprice", set_price))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞")
    application.run_polling()

if __name__ == "__main__":
    main()
