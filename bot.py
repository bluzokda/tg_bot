import os
import logging
from telegram import Update
from telegram.ext import (
    Updater, 
    CommandHandler, 
    MessageHandler, 
    Filters, 
    CallbackContext
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SQLite/PostgreSQL)
QA_DATABASE = {
    "—Ç–µ–æ—Ä–µ–º–∞ –ø–∏—Ñ–∞–≥–æ—Ä–∞": {
        "answer": "a¬≤ + b¬≤ = c¬≤",
        "source": "https://ru.wikipedia.org/wiki/–¢–µ–æ—Ä–µ–º–∞_–ü–∏—Ñ–∞–≥–æ—Ä–∞"
    },
    "—Ñ–æ—Ä–º—É–ª–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–∞": {
        "answer": "D = b¬≤ - 4ac",
        "source": "https://ru.wikipedia.org/wiki/–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç"
    },
    "—Å—Ç–æ–ª–∏—Ü–∞ —Ä–æ—Å—Å–∏–∏": {
        "answer": "–ú–æ—Å–∫–≤–∞",
        "source": "https://ru.wikipedia.org/wiki/–ú–æ—Å–∫–≤–∞"
    }
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ö–∏–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å/–∑–∞–¥–∞—á—É, –∞ —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º.\n"
        "–ü—Ä–∏–º–µ—Ä: '—Ç–µ–æ—Ä–µ–º–∞ –ø–∏—Ñ–∞–≥–æ—Ä–∞'"
    )

def handle_text(update: Update, context: CallbackContext) -> None:
    user_text = update.message.text.lower().strip()
    response = QA_DATABASE.get(user_text)
    
    if response:
        reply = f"‚úÖ –û—Ç–≤–µ—Ç:\n{response['answer']}\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫:\n{response['source']}"
    else:
        reply = "‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ."
    
    update.message.reply_text(reply)

def main() -> None:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv('TOKEN')
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")
        return

    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))

    # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–¥–ª—è Render)
    PORT = int(os.environ.get('PORT', 10000))
    updater.start_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=f"https://your-render-app-name.onrender.com/{TOKEN}"
    )
    updater.idle()

if __name__ == '__main__':
    main()
