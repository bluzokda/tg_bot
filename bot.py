import os
import logging
import requests
import signal
import sys
from aiohttp import web
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_STATE = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞ Wildberries –ø–æ —Ü–µ–Ω–∞–º –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π.\n\n"
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /setprice –∏ —É–∫–∞–∂–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /setprice 5000)\n"
        "2. –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"
    )

async def set_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã"""
    try:
        user_id = update.message.from_user.id
        price = float(context.args[0])

        if price <= 0:
            await update.message.reply_text("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return

        USER_STATE[user_id] = {"target_price": price}
        await update.message.reply_text(
            f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {price} —Ä—É–±.\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞."
        )

    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setprice <—Ü–µ–Ω–∞> (–Ω–∞–ø—Ä–∏–º–µ—Ä: /setprice 2500)")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º"""
    user_id = update.message.from_user.id
    query = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ —Ü–µ–Ω–∞
    if user_id not in USER_STATE or "target_price" not in USER_STATE[user_id]:
        await update.message.reply_text("‚ö† –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É —Å –ø–æ–º–æ—â—å—é /setprice")
        return

    target_price = USER_STATE[user_id]["target_price"]

    await update.message.reply_text(f"üîç –ò—â—É —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}' –¥–æ {target_price} —Ä—É–±...")

    try:
        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries
        products = search_wildberries(query)
        if not products:
            await update.message.reply_text(
                "üò¢ –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. "
                "–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Wildberries (–æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Render.com)."
            )
            return

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        filtered_products = [p for p in products if p["price"] <= target_price]
        filtered_products.sort(key=lambda x: x["price"])

        if not filtered_products:
            await update.message.reply_text("üò¢ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã.")
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        message = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_products)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
        for i, product in enumerate(filtered_products[:5], 1):
            message += (
                f"{i}. {product['name']}\n"
                f"üíµ –¶–µ–Ω–∞: {product['price']} ‚ÇΩ\n"
                f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {product['rating']} | ‚ú® –û—Ç–∑—ã–≤–æ–≤: {product['feedbacks']}\n"
                f"üõí [–ö—É–ø–∏—Ç—å]({product['link']})\n\n"
            )

        await update.message.reply_text(
            message,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def search_wildberries(query: str) -> list:
    """
    –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ API
    """
    url = "https://mobile-app.wildberries.ru/catalog/search"

    headers = {
        "User-Agent": "Wildberries/6.12.0 (iPhone; iOS 16.5; Scale/3.00)",
        "Accept": "application/json",
        "Accept-Language": "ru-RU;q=1.0",
        "Connection": "keep-alive",
        "Referer": "https://mobile-app.wildberries.ru/",
        "X-Requested-With": "XMLHttpRequest"
    }

    params = {
        "query": query.strip(),
        "page": 1,
        "sort": "popular",
        "lang": "ru",
        "locale": "ru",
        "curr": "rub",
        "version": "6.12.0",
        "device": "iPhone14,3"
    }

    try:
        response = requests.get(url, headers=headers, params=params, timeout=15)
        
        logger.info(f"Wildberries API: —Å—Ç–∞—Ç—É—Å {response.status_code}, URL: {response.url}")

        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status_code}, —Ç–µ–ª–æ: {response.text[:300]}")
            return []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω—Ç–∏–±–æ—Ç
        if not response.text.startswith("{"):
            logger.warning("–ü–æ–ª—É—á–µ–Ω HTML ‚Äî —Å—Ä–∞–±–æ—Ç–∞–ª –∞–Ω—Ç–∏–±–æ—Ç Wildberries")
            return []

        data = response.json()

        products_data = data.get("data", {}).get("products", [])
        if not products_data:
            logger.info(f"–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
            return []

        products = []
        for item in products_data[:20]:
            sale_price = item.get("salePriceU")
            if not sale_price:
                continue

            products.append({
                "name": item.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è").strip(),
                "price": sale_price // 100,
                "rating": float(item.get("reviewRating", 0)),
                "feedbacks": int(item.get("feedbacks", 0)),
                "link": f"https://www.wildberries.ru/catalog/{item['id']}/detail.aspx"
            })

        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
        return products

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}", exc_info=True)
        return []

async def health_check(request):
    """Health check endpoint"""
    return web.Response(text="OK", status=200)

async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram"""
    application = request.app['application']
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return web.Response()

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ Webhook"""
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    webhook_url = os.getenv("RENDER_EXTERNAL_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://tg-bot-ccn2.onrender.com
    port = int(os.getenv("PORT", 10000))

    if not token:
        logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    if not webhook_url:
        logger.error("‚ùå RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω")
        return

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("setprice", set_price))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ü–æ–ª–Ω—ã–π URL –≤–µ–±—Ö—É–∫–∞
    webhook_path = "/webhook"
    webhook_full_url = f"{webhook_url}{webhook_path}"

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
    await application.initialize()
    await application.start()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    await application.bot.set_webhook(url=webhook_full_url)

    # –°–æ–∑–¥–∞—ë–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    app = web.Application()
    app['application'] = application
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.router.add_get("/", health_check)
    app.router.add_get("/health", health_check)
    app.router.add_post(webhook_path, webhook_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

    logger.info(f"üåê –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info(f"üîó Webhook URL: {webhook_full_url}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    stop_event = asyncio.Event()
    loop = asyncio.get_running_loop()
    
    # –î–ª—è Linux/MacOS
    if sys.platform != "win32":
        loop.add_signal_handler(signal.SIGTERM, stop_event.set)
        loop.add_signal_handler(signal.SIGINT, stop_event.set)
    # –î–ª—è Windows
    else:
        def signal_handler(signum):
            stop_event.set()
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

    # –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    await stop_event.wait()
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await site.stop()
    await runner.cleanup()
    await application.stop()
    await application.shutdown()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
