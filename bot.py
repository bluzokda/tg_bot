import os
import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import sqlite3
import requests
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ categories.py
try:
    from categories import CATEGORIES
except ImportError:
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å CATEGORIES –∏–∑ categories.py")
    CATEGORIES = {}

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = 'user_data/users.db'

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏"""
    try:
        if not os.path.exists('user_data'):
            os.makedirs('user_data', exist_ok=True)
            logger.info("–ü–∞–ø–∫–∞ user_data —Å–æ–∑–¥–∞–Ω–∞")
        else:
            logger.info("–ü–∞–ø–∫–∞ user_data —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É user_data (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): {e}")

    # –¢–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                category_id INTEGER,
                price_threshold REAL,
                last_checked TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user(user_id, category_id, price_threshold):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users 
        (user_id, category_id, price_threshold, last_checked)
        VALUES (?, ?, ?, CURRENT_TIMESTAMP)
    ''', (user_id, category_id, price_threshold))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_user(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT user_id, category_id, price_threshold 
        FROM users WHERE user_id = ?
    ''', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

# –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
def update_last_checked(user_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE users SET last_checked = CURRENT_TIMESTAMP 
        WHERE user_id = ?
    ''', (user_id,))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ API Wildberries
def parse_category(category_data):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ API Wildberries
    category_data: —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    try:
        if not category_data or 'url' not in category_data:
            return []
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API
        base_url = "https://catalog.wb.ru/catalog"
        category_url = category_data['url']
        query_param = category_data.get('query', 'subject')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            'appType': '1',
            'curr': 'rub',
            'dest': '-1257786',  # –†–æ—Å—Å–∏—è
            'lang': 'ru',
            'locale': 'ru',
            'page': '1',        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            'sort': 'popular',  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            'spp': '0',         # –ö–æ–ª-–≤–æ –ø–æ–∫–∞–∑–æ–≤
            query_param: category_data.get('id', '')
        }
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'application/json',
            'Referer': 'https://www.wildberries.ru/'
        }
        
        # –ü–æ–ª–Ω—ã–π URL
        api_url = f"{base_url}/{category_url}/catalog"
        
        response = requests.get(
            api_url, 
            params=params, 
            headers=headers, 
            timeout=15
        )
        
        if response.status_code != 200:
            logger.error(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}: {response.text}")
            return []
            
        data = response.json()
        products = []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        products_data = data.get('data', {}).get('products', [])
        
        for item in products_data:
            try:
                # –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞ (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏)
                price = item.get('salePriceU', 0) / 100  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö -> —Ä—É–±–ª–∏
                
                # –ï—Å–ª–∏ —Ü–µ–Ω–∞ 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é —Ü–µ–Ω—É
                if price == 0:
                    price = item.get('priceU', 0) / 100
                    
                # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                title = item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                
                # –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
                product_id = item.get('id')
                link = f"https://www.wildberries.ru/catalog/{product_id}/detail.aspx"
                
                if price > 0:
                    products.append({
                        'title': title,
                        'price': price,
                        'link': link
                    })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞: {e}")
                continue
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API –¥–ª—è {category_data.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è')}")
        return products
        
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ API: {e}")
        return []

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async def check_prices(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, category_id, price_threshold FROM users')
        users = cursor.fetchall()
        conn.close()
        
        if not users:
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
            
        for user in users:
            user_id, category_id, price_threshold = user
            category = CATEGORIES.get(category_id)
            
            if category:
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category['name']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                products = parse_category(category)
                found = 0
                
                for product in products:
                    if product['price'] <= price_threshold:
                        message = (
                            f"üî• <b>–ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É!</b>\n\n"
                            f"üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product['title']}\n"
                            f"üí∞ <b>–¶–µ–Ω–∞:</b> {product['price']:,.0f} ‚ÇΩ\n"
                            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> <a href='{product['link']}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É</a>"
                        )
                        try:
                            await context.bot.send_message(
                                chat_id=user_id,
                                text=message,
                                parse_mode='HTML',
                                disable_web_page_preview=False
                            )
                            found += 1
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                if found > 0:
                    update_last_checked(user_id)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {found} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                time.sleep(2)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ Wildberries.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üîπ /set_category ‚Äî –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤\n"
        "üîπ /set_price ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã\n\n"
        "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ —Ü–µ–Ω–µ –Ω–∏–∂–µ –≤–∞—à–µ–π!"
    )

# –ö–æ–º–∞–Ω–¥–∞ /set_category
async def set_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_category"""
    if not CATEGORIES:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    categories_list = "\n".join([f"<b>{cat['id']}</b>. {cat['name']}" for cat in CATEGORIES.values()])
    await update.message.reply_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
        f"{categories_list}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä</b> –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        parse_mode='HTML'
    )
    context.user_data['state'] = 'set_category'

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def process_set_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_input = update.message.text.strip()
    try:
        category_id = int(user_input)
        if category_id in CATEGORIES:
            context.user_data['category_id'] = category_id
            await update.message.reply_text(
                f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: <b>{CATEGORIES[category_id]['name']}</b>\n\n"
                "–¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_price.",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")

# –ö–æ–º–∞–Ω–¥–∞ /set_price
async def set_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_price"""
    if 'category_id' not in context.user_data:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_category."
        )
        return
        
    await update.message.reply_text(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>15000</b>):",
        parse_mode='HTML'
    )
    context.user_data['state'] = 'set_price'

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞ —Ü–µ–Ω—ã
async def process_set_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞ —Ü–µ–Ω—ã"""
    user_input = update.message.text.strip()
    try:
        price_threshold = float(user_input)
        if price_threshold <= 0:
            await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
            
        if 'category_id' in context.user_data:
            category_id = context.user_data['category_id']
            user_id = update.effective_user.id
            
            add_user(user_id, category_id, price_threshold)
            
            await update.message.reply_text(
                f"‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n"
                f"üîç –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORIES[category_id]['name']}\n"
                f"üí∞ –ü–æ—Ä–æ–≥ —Ü–µ–Ω—ã: {price_threshold:,.0f} ‚ÇΩ\n\n"
                "–Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ —Ç–æ–≤–∞—Ä–∞—Ö –ø–æ —ç—Ç–æ–π —Ü–µ–Ω–µ –∏–ª–∏ –Ω–∏–∂–µ.",
                parse_mode='HTML'
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if 'state' in context.user_data:
                del context.user_data['state']
            if 'category_id' in context.user_data:
                del context.user_data['category_id']
                
        else:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_category."
            )
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10000.50).")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def process_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if 'state' in context.user_data:
        state = context.user_data['state']
        if state == 'set_category':
            await process_set_category(update, context)
        elif state == 'set_price':
            await process_set_price(update, context)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv('TOKEN')
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set_category", set_category))
    application.add_handler(CommandHandler("set_price", set_price))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_message))

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        check_prices,
        'interval',
        minutes=60,
        args=[application],
        id='price_check_job'
    )
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç)")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
